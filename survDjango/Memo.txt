AF7859400

3.18.90.222
git config --global user.email "iwishido86@gmail.com"
				git config --global user.name "iwishido86"

iwishido86@gmail.com

python -m venv myvenv
.\myvenv\scripts\activate.bat
python -m pip install -U pip
pip install wheel django djangorestframework pylint
django-admin startproject config .
django-admin startapp survDjango

python manage.py createsuperuser

python manage.py makemigrations
python manage.py migrate

python manage.py runserver


python3 manage.py createsuperuser

python3 manage.py makemigrations survDjango
python3 manage.py migrate survDjango
python3 manage.py runserver 0.0.0.0:80

pip install httpie

ps -ef | grep py



sudo apt-get update
sudo apt-get install git
sudo apt-get install python3-pip
sudo pip3 install django==1.10
git clone

python3 manage.py runserver

Mac, Windows 공통(계속)


14. 커맨드 창이 열리면 "sudo apt-get update"

- 설치할 수 있는 패키지의 정보를 불러오는 것이라고 보면 됨.

15. "sudo apt-get install git", "y"

16. "sudo apt-get install python3-pip", "y"

- python3 모듈을 관리하는 python3버전의 pip 설치

17. "sudo pip3 install django==1.10"

18. "git clone 깃허브 리포지토리 링크"

19. "python3 manage.py runserver"

ln –s python3 python

ln –n /usr/bin/python3 /usr/bin/python

ln –s /usr/bin/python3 /usr/bin/python
ln /usr/bin/python2.7 /usr/bin/python

git clone https://github.com/iwishido86/survDjango.git
python3 manage.py runserver


wget https://kojipkgs.fedoraproject.org//packages/sqlite/3.8.11/1.fc21/x86_64/sqlite-devel-3.8.11-1.fc21.x86_64.rpm

wget https://kojipkgs.fedoraproject.org//packages/sqlite/3.8.11/1.fc21/x86_64/sqlite-3.8.11-1.fc21.x86_64.rpm

sudo yum install sqlite-3.8.11-1.fc21.x86_64.rpm sqlite-devel-3.8.11-1.fc21.x86_64.rpm

sqlite3 --version

https://github.com/iwishido86/survDjango.git

출처: https://sun2day.tistory.com/216 [보안쟁이-회사원의 일상]

http://ec2-18-223-102-218.us-east-2.compute.amazonaws.com
18.216.208.215
ec2-3-137-120-42.us-east-2.compute.amazonaws.com

http://ec2-18-223-102-218.us-east-2.compute.amazonaws.com:8000/
http://ec2-18-223-102-218.us-east-2.compute.amazonaws.com:8000/knight_ligin/경진


1. python manage.py runserver 명령어로 서버를 실행시킨다.

2. 'Ctrl + z' 를 눌러 해당 프로그램을 정지(pause) 시킨 후 shell로 돌아온다.

3. 'bg' 명령어를 쳐서 해당 프로그램을 백그라운드로 보내어 돌린다.

4. 'disown -h' 명령어를 쳐서 ssh 연결이 끊어져도 해당 프로세스가 돌아가도록 한다.

5. 터미널 창을 닫는다.

<실행중인 프로세스 확인>

- "ps -l"

bg
disown -h

git stash clear


python3 manage.py makemigrations survDjango
python3 manage.py migrate survDjango
python3 manage.py runserver 0.0.0.0:80


ps -ef | grep py









from random import random, randint

from django.db.models import Q, Max
from django.http import HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from rest_framework.authtoken.models import Token
from rest_framework import permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response

from .forms import UserLoginForm, KnightSelectForm, KnightElectionForm
from .models import Board, Knight, User, SelectKnight, Game, Election, Expedition
from .serializers import RegistrationUserSerializer


def knight_select_view(request, username):
    template_name = 'abaloneDjango/knight_select.html'

    if request.method == 'POST':
        form = KnightSelectForm(request.POST)

        username = request.POST.get('username')

        user, created = User.objects.get_or_create(
            username=username
        )

        user.username = username
        user.readyYn = 'Y'
        user.joinYn = 'Y'

        user.save()

        delSelectKnightList = SelectKnight.objects.filter(username=username)

        delSelectKnightList.delete()

        knightliststr = request.POST.get('knightliststr')

        knightlist = knightliststr.split(';')

        for knightId in knightlist :
            if knightId == '':
                break

            selectKnight, created = SelectKnight.objects.get_or_create(
                username=username,
                knightId=knightId
            )
            selectKnight.save()

        return HttpResponseRedirect(
            '/mycard/%s' % username
        )

    else:
        form = KnightSelectForm()
        form.fields['username'].initial = username
        knightlist = Knight.objects.filter(~Q(knightId=9)).order_by('knightId')
        context = {
            'form': form,
            'username':username,
            'knightlist': knightlist,
        }

    return render(request, template_name, context)


def base_view(request):
    template_name = 'abaloneDjango/base.html'
    return render(request, template_name)


def knight_login_view(request):

    template_name = 'abaloneDjango/knight_login.html'

    if request.method == 'POST':
        form = UserLoginForm(request.POST)
        if form.is_valid():

            user, created = User.objects.get_or_create(
                username=form.cleaned_data['username']
            )

            user.username = form.cleaned_data['username']
            user.joinYn = 'Y'
            user.readyYn = 'N'

            user.save()

            return HttpResponseRedirect(
                '/knight_select/%s' % form.cleaned_data['username']
            )
    else:
        form = UserLoginForm()

    context = {
        'form': form
    }
    return render(request, template_name, context)


def knight_auto_view(request,username):
    user, created = User.objects.get_or_create(
        username=username
    )

    user.username = username
    user.joinYn = 'Y'
    user.readyYn = 'N'

    user.save()

    return HttpResponseRedirect(
        '/knight_select/%s' % username
    )


def mycard_view(request,username):

    template_name = 'abaloneDjango/mycard.html'

    user = get_object_or_404(User, username=username)

    if user.assinKnightId == 0:  # 미배정
        template_name = 'abaloneDjango/wait.html'

    joinusercnt = User.objects.filter(joinYn='Y').count()
    readyusercnt = User.objects.filter(readyYn='Y').count()

    cardinfo = ''
    cardinfostr = ''
    if user.assinKnightId == 1 : # 멀린

        userlist = User.objects.filter(assinKnightId__in=[6,7,10])

        for userinfo in userlist:
            cardinfostr = cardinfostr + '['+userinfo.username + '] '

        cardinfo = '모드레드를 제외한 악 : ' + cardinfostr
    elif user.assinKnightId == 2: # 퍼시발
        userlist = User.objects.filter(assinKnightId__in=[1,6])

        for userinfo in userlist:
            cardinfostr = cardinfostr + '[' + userinfo.username + '] '

        cardinfo = '멀린 or 모르가나 : '+ cardinfostr

    elif user.assinKnightId in [5,6,7]: # 모드레드
        userlist = User.objects.filter(assinKnightId__in=[5,6,7])

        for userinfo in userlist:
            cardinfostr = cardinfostr + '[' + userinfo.username + '] '

        cardinfo = '악의 하수인들 : '+ cardinfostr


    context = {
        'username': username,  # 추가
        'assinknightid': user.assinKnightId,  # 추가
        'cardinfo': cardinfo,  # 추가
        'joinusercnt': joinusercnt,  # 추가
        'readyusercnt': readyusercnt,  # 추가
    }

    return render(request, template_name, context)


def start_view(request):
    template_name = 'abaloneDjango/start.html'

    userlist = User.objects.all().order_by('-joinYn')  # 추가

    joinusercnt = User.objects.filter(joinYn='Y').count()

    readyusercnt = User.objects.filter(readyYn='Y').count()

    # 하나임
    gamelist = Game.objects.filter(completeYn='N')  # 추가

    context = {
        'userlist': userlist,  # 추가
        'joinusercnt': joinusercnt,  # 추가
        'readyusercnt': readyusercnt,  # 추가
        'gamelist':gamelist,
    }
    return render(request, template_name, context)


def assin_view(request):
    template_name = 'abaloneDjango/start.html'
    weight = 5
    assinnum = 0

    #참여 유저수
    joinusercnt = User.objects.filter(joinYn='Y').count()

    # 게임 setting
    gamecnt = Game.objects.filter(completeYn='N').count()

    if gamecnt > 0 :
        return render(request, 'abaloneDjango/error.html', {'errstr': '아직 진행중인 게임이 있습니다. 게임을 취소하고 다시 시도하십시오'} )

    gameIdObj = Game.objects.all().order_by('-gameId')

    if gameIdObj :
        gameId = gameIdObj[0].gameId + 1
    else:
        gameId= 1

    game = Game.objects.create()

    game.gameId = gameId
    game.joinUserCnt = joinusercnt

    game.save()


    # 카드 세팅 초기화
    userlist = User.objects.filter(joinYn='Y')

    for user in userlist:
        user.assinKnightId = 0
        user.save()


    # 카드 지정 완료 유저 Q
    assineduserq = Q()
    for i in range(1,joinusercnt+1):

        q = Q(knightId=i)
        q.add(~assineduserq ,q.AND)

        selectknightlist = SelectKnight.objects.filter(q)

        #for selectknight in selectknightlist:
            #print(selectknight.username + selectknight.knightId.__str__() )

        selectknightcnt = weight * selectknightlist.count()

        assinnum = randint(1,joinusercnt + selectknightcnt +1 - i)

        if assinnum <= selectknightcnt:
            assinedusername = selectknightlist[ ( (assinnum-1)/weight).__int__()].username

        else:
            unassineduserlist = User.objects.filter(Q(joinYn='Y') & Q(assinKnightId=0))
            assinedusername = unassineduserlist[(assinnum - selectknightcnt-1)].username

        user = get_object_or_404(User, username=assinedusername)
        user.assinKnightId = i
        user.save()

        assineduserq.add( Q(username=assinedusername) , assineduserq.OR)

    return HttpResponseRedirect('/start/' )


def delete_view(request,username):
    template_name = 'abaloneDjango/start.html'

    user = get_object_or_404(User, username=username)

    user.delete()

    return HttpResponseRedirect('/start/' )


def join_view(request,username):
    template_name = 'abaloneDjango/start.html'

    user = get_object_or_404(User, username=username)

    user.username = username
    user.joinYn = 'Y'

    user.save()

    return HttpResponseRedirect('/start/' )


def init_view(request):
    template_name = 'abaloneDjango/start.html'

    userlist = User.objects.all()

    for user in userlist:
        user.joinYn = 'N'
        user.readyYn = 'N'
        user.assinKnightId = 0
        user.save()

    selectknightlist = SelectKnight.objects.all()

    for selectknight in selectknightlist:
        selectknight.delete()


    return HttpResponseRedirect('/start/')


def game_complete_view(request,gameid):
    template_name = 'abaloneDjango/start.html'

    userlist = User.objects.all()

    # 유저 지정카드 초기화
    for user in userlist:
        user.assinKnightId = 0
        user.save()

    game = get_object_or_404(Game, gameId=gameid)

    game.completeYn = 'Y'

    game.save()

    return HttpResponseRedirect('/start/' )


def expeditionSeq_ini_view(request,gameid):
    template_name = 'abaloneDjango/start.html'

    game = get_object_or_404(Game, gameId=gameid)
    expeditionSeq = game.expeditionSeq - 1
    if expeditionSeq < 1:
        expeditionSeq = 1

    game.expeditionSeq = expeditionSeq
    game.save()

    expedition = Expedition.objects.filter(gameId=gameid,expeditionSeq__gte=expeditionSeq)
    expedition.delete()

    election = Election.objects.filter(gameId=gameid, expeditionSeq__gte=expeditionSeq)
    election.delete()

    return HttpResponseRedirect('/start/' )



def knight_election_view(request, username):
    template_name = 'abaloneDjango/knight_election.html'

    gamemap = [
        [2, 3, 3, 4, 4],
        [3, 4, 4, 5, 5],
        [3, 4, 4, 5, 5],
        [3, 4, 4, 5, 5],
    ]

    if request.method == 'POST':
        form = KnightElectionForm(request.POST)

        username = request.POST.get('username')
        gameid = request.POST.get('gameid')
        succyn = request.POST.get('succyn')
        expeditionseq = request.POST.get('expeditionseq')

        # 게임 및 회차 valid
        game = get_object_or_404(Game, gameId=gameid)
        if game.expeditionSeq.__str__()  != expeditionseq:
            return render(request, 'abaloneDjango/knight_error.html', {'username': username, 'errstr': '회차 오류/ 새로고침후 다시 투표'})
        if game.completeYn != 'N':
            return render(request, 'abaloneDjango/knight_error.html', {'username': username, 'errstr': '종료된 게임/ 새로고침후 다시 투표'})

        # 투표여부확인
        electioncnt = Election.objects.filter(gameId=gameid, expeditionSeq=expeditionseq, username=username).count()

        if electioncnt > 0:
            return render(request, 'abaloneDjango/knight_error.html', {'username':username,'errstr': '이미 투표하셨습니다.'})

        election = Election.objects.create()

        election.gameId = gameid
        election.succYn = succyn
        election.expeditionSeq = expeditionseq
        election.username = username

        election.save()
        maxelectioncnt = gamemap[game.joinUserCnt-7][int(expeditionseq)-1]

        # 최종결과 저장
        electioncnt = Election.objects.filter(gameId=gameid,expeditionSeq=expeditionseq).count()
        if electioncnt >= maxelectioncnt:
            usernamelist = ''
            succcnt = Election.objects.filter(gameId=gameid, expeditionSeq=expeditionseq,succYn='Y').count()
            electionlist = Election.objects.filter(gameId=gameid, expeditionSeq=expeditionseq)

            for election in electionlist:
                usernamelist = usernamelist + '[' + election.username + ']'
            offset = 0

            # 4회차는 봐준다
            if expeditionseq == '4' :
                offset = 1

            if succcnt >= electioncnt - offset:
                expeditionsuccyn = 'Y'
            else:
                expeditionsuccyn = 'N'

            expedition = Expedition.objects.create()

            expedition.gameId = gameid
            expedition.expeditionSeq = expeditionseq
            expedition.succYn = expeditionsuccyn
            expedition.expeditionUserCnt = electioncnt
            expedition.succUserCnt = succcnt
            expedition.completeYn = 'Y'
            expedition.usernamelist = usernamelist

            expedition.save()

            # 진행회차 증가
            game.expeditionSeq = int(expeditionseq) + 1
            game.save()

        return HttpResponseRedirect(
            '/knight_expedition/%s' % username
        )

    else:
        form = KnightElectionForm()

        game = Game.objects.get(completeYn='N')

        if not game:  # 미배정
            return HttpResponseRedirect(
                '/mycard/%s' % username
            )
        form.fields['gameid'].initial = game.gameId
        form.fields['expeditionseq'].initial = game.expeditionSeq
        form.fields['username'].initial = username

        expeditionlist = Expedition.objects.filter(gameId=game.gameId).order_by('expeditionSeq')

        context = {
            'form': form,
            'username':username,
            'gameid': game.gameId,
            'joinusercnt': game.joinUserCnt,
            'expeditionseq': game.expeditionSeq,
            'expeditionlist': expeditionlist,
        }

    return render(request, template_name, context)



def knight_expedition_view(request, username):
    template_name = 'abaloneDjango/knight_expedition.html'

    if request.method == 'POST':
        template_name  = 'abaloneDjango/knight_election.html'

        form = KnightElectionForm(request.POST)

        username = request.POST.get('username')
        gameid = request.POST.get('gameid')
        succyn = request.POST.get('succyn')
        expeditionseq = request.POST.get('expeditionseq')

        form.fields['gameid'].initial = gameid
        form.fields['expeditionseq'].initial = expeditionseq
        form.fields['username'].initial = username
        form.fields['succyn'].initial = succyn


        # 투표여부확인
        electioncnt = Election.objects.filter(gameId=gameid, expeditionSeq=expeditionseq, username=username).count()

        if electioncnt > 0:
            return render(request, 'abaloneDjango/knight_error.html', {'username':username,'errstr': '이미 투표하셨습니다.'})

        return HttpResponseRedirect(
            '/knight_election/%s' % username
        )

    else:
        form = KnightElectionForm()

        try:
            game = Game.objects.get(completeYn='N')
        except Game.DoesNotExist:
            return HttpResponseRedirect(  '/mycard/%s' % username )

        form.fields['gameid'].initial = game.gameId
        form.fields['expeditionseq'].initial = game.expeditionSeq
        form.fields['username'].initial = username

        expeditionlist = Expedition.objects.filter(gameId=game.gameId).order_by('expeditionSeq')

        failrangelist = {}
        succrangelist = {}
        for expedition in expeditionlist:
            failrangelist[expedition.expeditionSeq]= range(1, expedition.expeditionUserCnt - expedition.succUserCnt)
            succrangelist[expedition.expeditionSeq]  = range(1,expedition.succUserCnt)

        context = {
            'form': form,
            'username':username,
            'gameid': game.gameId,
            'joinusercnt': game.joinUserCnt,
            'expeditionseq': game.expeditionSeq,
            'expeditionlist': expeditionlist,
            'failrangelist':failrangelist,
            'succrangelist': succrangelist,
        }

    return render(request, template_name, context)




	$(document).ready(
			function() {
					$("#link-copy-btn").click(function() {
						copyShareLink();
					});
					$("#tag-copy-btn").click(function() {
						copyTag();
					});
					$("#btn_notice_close").click(function() {
						$("#contents").hide();
					});
					$("#fb-link-btn").click(function() {
						location.href="http://www.facebook.com/sharer/sharer.php?u=https://app.m-nitpick.com/psytest/mc";
					});

					//roulette
					var count = $('div.roulette').children().length
					$('div.roulette').roulette(option);
					var currentClickedIndex = -1;
					var btns = $(".quest-answer");
					$.each(btns, function(index, value) {
						$(this).click(
								function() {
									var btn = $(this);
									$(this).parent().parent().fadeOut(300,function(){
										if(index == currentClickedIndex){
											return;
										}
										var qNo = btn.attr('id');
										var val = btn.attr('value');
										addOption(qNo,val);
										swiper.slideNext();
										currentClickedIndex = index;
										if (qNo == 12) {
											showResultBtn();
										}
									})

								})
					});
				});
	var option = {
			speed : 20,
			duration : 1,
			stopImageNumber : 0
		}
	var optionArr = Array(4).fill(0);
	function addOption(no, a) {
		//onsole.log("addOption addOption : " + no + " / " + a);
		let index = (no - 1) % 4;
		optionArr[index] = optionArr[index] + parseInt(a);
		//console.log("addOption index : " + index+", a :"+a);
		//console.log("addOption optionArr : " + optionArr);
	}
	function showResultBtn() {
		$('.show-result-btn').delay(3000).fadeIn(2000);
	}
	function resultTest() {
		var resultStr = calTestResultMC(optionArr);
		var psyobjs = $(".psyobj");
		var resultIndex = 1;
 		$.each(psyobjs, function(index, obj) {
			//var id = $(this).attr('id');
			var val = $(this).attr('value');
		 	if(resultStr == val){
				resultIndex = index;
				//console.log("psyobj matching!! resultStr /val : "+ resultStr + ": " + val);
			}
			//console.log("psyobj id /val : "+ index + ": " + val);
		});

		option.stopImageNumber = resultIndex;
		$('div.roulette').roulette('option', option).roulette('start');
		var ssid = $('#ssid').val();
		$.ajax({
            type: 'POST',
            url: '/v1/web/event/psy/result/2/'+resultStr,
            beforeSend: function(request) {
        	    request.setRequestHeader("SSID", ssid);
        	  },
            dataType: 'json',
            success: function(data){ // response is returned by server
					if(data.resultCode == 200){
						//alert(data.resultData.sName);
						var count = data.resultData.totalCount;
						if(count < 500){
							$("#result_percent").hide();
						} else {
							$("#result_rate").text(data.resultData.nRate+"%");
							$("#result_total_count").text(comma(count));
						}
						$("#result_name").text(data.resultData.sName+"-"+data.resultData.sType);
						$("#result_name_link").text(data.resultData.sName);
						$("#result_title").text(data.resultData.sResultTitle);
						$("#result_msg").text(data.resultData.sResultMsg);
						$("#result_same_type_name").text(data.resultData.sameTypeObj.sName+"-"+data.resultData.sameTypeObj.sType);
						$("#result_other_type_name").text(data.resultData.otherTypeObj.sName+"-"+data.resultData.otherTypeObj.sType);
						//var imgPath = $(".fin").attr("data-path");
						$("#result_same_type_img").attr("src", '/img/event/12/'+data.resultData.sameTypeObj.sType+".png");
						$("#result_other_type_img").attr("src", '/img/event/12/'+data.resultData.otherTypeObj.sType+".png");
					} else {
						//alert("실패!!\n사유: "+data.resultMsg);
					}
            },
            error: function(response){
         	   //alert("실패!!\n사유: "+response);
            },
       });
	}
	//룰렛 멈춤시 호출
	function stopCallback() {
		//$('.result_msg_mid').show("slow");
		//$('.result_msg_bottom').show(1500);
 		 $( ".result_msg_mid" ).slideDown( 1200, function() {
			    // Animation complete.
			    $( ".sns-link" ).show();

		 });
	}
	//테스트 링크복사
	function copyShareLink() {
		  /* Get the text field */
		  var copyText = document.getElementById("myInput");
		  /* Select the text field */
		  copyText.select();
		  copyText.setSelectionRange(0, 99999); /*For mobile devices*/
		  /* Copy the text inside the text field */
		  document.execCommand("copy");
		  /* Alert the copied text */
		  alert("공유링크 복사완료 !!");
		}
	//태그복사
	function copyTag() {
		  /* Get the text field */
		  var copyText = document.getElementById("myTag");
		  /* Select the text field */
		  copyText.select();
		  copyText.setSelectionRange(0, 99999); /*For mobile devices*/
		  /* Copy the text inside the text field */
		  document.execCommand("copy");
		  /* Alert the copied text */
		  alert("해시태그 복사완료!!");
		}
	// SDK를 초기화 합니다. 사용할 앱의 JavaScript 키를 설정해 주세요.
	Kakao.init(kakaoSDKKey);
	// SDK 초기화 여부를 판단합니다.
	//console.log('Kakao isInit::'+Kakao.isInitialized());

	$(".rec_like").click(function () { // .like 버튼을 클릭 감지
        var pk = $(this).attr('name')
        $.ajax({ // ajax로 서버와 통신
            type: "POST",
            url: "{% url 'recipe:recipe_like' %}",
            data: { 'pk': pk, 'csrfmiddlewaretoken': '{{ csrf_token }}' },
            dataType: "json",
            success: function (response) {
                alert(response.message);
                $("#rec_count-" + pk).html("좋아요&nbsp;" + response.rec_likes_count + "개");
                if (response.message == "좋아요")

                    {
                        $('#rec_heart' + pk).attr("class", "fas fa-heart")
                    } else if (response.message == "좋아요 취소")

                    {
                        $('#rec_heart' + pk).attr("class", "far fa-heart")
                    }
            },
            error: function (request, status, error) { // 실패
                alert("로그인이 필요합니다.")
                window.location.replace("/accounts/login/") // 로그인 페이지로 넘어가기
            },
        });
    })